
A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000e2c  00000ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000119  00800060  00800060  00000ec0  2**0
                  ALLOC
  3 .stab         000015e4  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045b  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122b  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027a  00000000  00000000  00003beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073b  00000000  00000000  00003e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000045a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  00004af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	67 c0       	rjmp	.+206    	; 0xd2 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	65 c0       	rjmp	.+202    	; 0xd2 <__bad_interrupt>
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	63 c0       	rjmp	.+198    	; 0xd2 <__bad_interrupt>
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	61 c0       	rjmp	.+194    	; 0xd2 <__bad_interrupt>
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	83 c4       	rjmp	.+2310   	; 0x91a <__vector_9>
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	5d c0       	rjmp	.+186    	; 0xd2 <__bad_interrupt>
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	5b c0       	rjmp	.+182    	; 0xd2 <__bad_interrupt>
  1c:	50 c5       	rjmp	.+2720   	; 0xabe <__vector_14>
  1e:	59 c0       	rjmp	.+178    	; 0xd2 <__bad_interrupt>
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	57 c0       	rjmp	.+174    	; 0xd2 <__bad_interrupt>
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	a8 c1       	rjmp	.+848    	; 0x378 <display+0x110>
  28:	ac c1       	rjmp	.+856    	; 0x382 <display+0x11a>
  2a:	ab c1       	rjmp	.+854    	; 0x382 <display+0x11a>
  2c:	aa c1       	rjmp	.+852    	; 0x382 <display+0x11a>
  2e:	a9 c1       	rjmp	.+850    	; 0x382 <display+0x11a>
  30:	a8 c1       	rjmp	.+848    	; 0x382 <display+0x11a>
  32:	a7 c1       	rjmp	.+846    	; 0x382 <display+0x11a>
  34:	a6 c1       	rjmp	.+844    	; 0x382 <display+0x11a>
  36:	a5 c1       	rjmp	.+842    	; 0x382 <display+0x11a>
  38:	a4 c1       	rjmp	.+840    	; 0x382 <display+0x11a>
  3a:	a3 c1       	rjmp	.+838    	; 0x382 <display+0x11a>
  3c:	a2 c1       	rjmp	.+836    	; 0x382 <display+0x11a>
  3e:	a1 c1       	rjmp	.+834    	; 0x382 <display+0x11a>
  40:	a0 c1       	rjmp	.+832    	; 0x382 <display+0x11a>
  42:	9d c1       	rjmp	.+826    	; 0x37e <display+0x116>
  44:	9e c1       	rjmp	.+828    	; 0x382 <display+0x11a>
  46:	92 c1       	rjmp	.+804    	; 0x36c <display+0x104>
  48:	76 c1       	rjmp	.+748    	; 0x336 <display+0xce>
  4a:	78 c1       	rjmp	.+752    	; 0x33c <display+0xd4>
  4c:	7a c1       	rjmp	.+756    	; 0x342 <display+0xda>
  4e:	7c c1       	rjmp	.+760    	; 0x348 <display+0xe0>
  50:	7e c1       	rjmp	.+764    	; 0x34e <display+0xe6>
  52:	80 c1       	rjmp	.+768    	; 0x354 <display+0xec>
  54:	82 c1       	rjmp	.+772    	; 0x35a <display+0xf2>
  56:	84 c1       	rjmp	.+776    	; 0x360 <display+0xf8>
  58:	86 c1       	rjmp	.+780    	; 0x366 <display+0xfe>
  5a:	8b c1       	rjmp	.+790    	; 0x372 <display+0x10a>
  5c:	92 c1       	rjmp	.+804    	; 0x382 <display+0x11a>
  5e:	91 c1       	rjmp	.+802    	; 0x382 <display+0x11a>
  60:	90 c1       	rjmp	.+800    	; 0x382 <display+0x11a>
  62:	8f c1       	rjmp	.+798    	; 0x382 <display+0x11a>
  64:	8e c1       	rjmp	.+796    	; 0x382 <display+0x11a>
  66:	8d c1       	rjmp	.+794    	; 0x382 <display+0x11a>
  68:	18 c1       	rjmp	.+560    	; 0x29a <display+0x32>
  6a:	1a c1       	rjmp	.+564    	; 0x2a0 <display+0x38>
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <display+0x3e>
  6e:	1e c1       	rjmp	.+572    	; 0x2ac <display+0x44>
  70:	20 c1       	rjmp	.+576    	; 0x2b2 <display+0x4a>
  72:	22 c1       	rjmp	.+580    	; 0x2b8 <display+0x50>
  74:	24 c1       	rjmp	.+584    	; 0x2be <display+0x56>
  76:	26 c1       	rjmp	.+588    	; 0x2c4 <display+0x5c>
  78:	28 c1       	rjmp	.+592    	; 0x2ca <display+0x62>
  7a:	2a c1       	rjmp	.+596    	; 0x2d0 <display+0x68>
  7c:	2c c1       	rjmp	.+600    	; 0x2d6 <display+0x6e>
  7e:	2e c1       	rjmp	.+604    	; 0x2dc <display+0x74>
  80:	30 c1       	rjmp	.+608    	; 0x2e2 <display+0x7a>
  82:	32 c1       	rjmp	.+612    	; 0x2e8 <display+0x80>
  84:	34 c1       	rjmp	.+616    	; 0x2ee <display+0x86>
  86:	36 c1       	rjmp	.+620    	; 0x2f4 <display+0x8c>
  88:	38 c1       	rjmp	.+624    	; 0x2fa <display+0x92>
  8a:	3a c1       	rjmp	.+628    	; 0x300 <display+0x98>
  8c:	3c c1       	rjmp	.+632    	; 0x306 <display+0x9e>
  8e:	3e c1       	rjmp	.+636    	; 0x30c <display+0xa4>
  90:	40 c1       	rjmp	.+640    	; 0x312 <display+0xaa>
  92:	42 c1       	rjmp	.+644    	; 0x318 <display+0xb0>
  94:	44 c1       	rjmp	.+648    	; 0x31e <display+0xb6>
  96:	46 c1       	rjmp	.+652    	; 0x324 <display+0xbc>
  98:	48 c1       	rjmp	.+656    	; 0x32a <display+0xc2>
  9a:	4a c1       	rjmp	.+660    	; 0x330 <display+0xc8>

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d4 e0       	ldi	r29, 0x04	; 4
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ec e2       	ldi	r30, 0x2C	; 44
  b0:	fe e0       	ldi	r31, 0x0E	; 14
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 36       	cpi	r26, 0x60	; 96
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 37       	cpi	r26, 0x79	; 121
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	61 d5       	rcall	.+2754   	; 0xb92 <main>
  d0:	ab c6       	rjmp	.+3414   	; 0xe28 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <startLCD>:
#define MYLCD_H_

void startLCD()  // this function is used to initial LCD screen and it will be called in initial steps
{
	//setting up port direction on microprocessor
	DDRC=0b00110000; //portc has RS on bit 4, and enable on bit 5
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ea       	ldi	r24, 0xA7	; 167
  de:	91 e6       	ldi	r25, 0x61	; 97
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <startLCD+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <startLCD+0x12>
  e6:	00 00       	nop
	_delay_ms(100); //wait a little bit of time for the LCD to power up properly.
	
	//initialisation of LCD screen
	PORTC=0b00100000; //enable is high, RS is low (I'm going to send a command)
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e3 ef       	ldi	r30, 0xF3	; 243
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <startLCD+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <startLCD+0x22>
  f6:	00 00       	nop
	_delay_ms(2);
	PORTD=0b00011100; //command1: function set (5x7 dot format, 2 line mode, 8-bit data)
  f8:	9c e1       	ldi	r25, 0x1C	; 28
  fa:	92 bb       	out	0x12, r25	; 18
  fc:	e3 ef       	ldi	r30, 0xF3	; 243
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <startLCD+0x2c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <startLCD+0x32>
 106:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low, RS stays low (it will execute the command now)
 108:	15 ba       	out	0x15, r1	; 21
 10a:	e3 ef       	ldi	r30, 0xF3	; 243
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <startLCD+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <startLCD+0x40>
 114:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00100000; //enable is high, RS is low (I'm going to send another command)
 116:	85 bb       	out	0x15, r24	; 21
 118:	e3 ef       	ldi	r30, 0xF3	; 243
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <startLCD+0x48>
 120:	00 c0       	rjmp	.+0      	; 0x122 <startLCD+0x4e>
 122:	00 00       	nop
	_delay_ms(2);
	PORTD=0b11110000; //command2: display on / cursor (Blink ON, underline ON, Display ON - you can use different settings if you like)
 124:	90 ef       	ldi	r25, 0xF0	; 240
 126:	92 bb       	out	0x12, r25	; 18
 128:	e3 ef       	ldi	r30, 0xF3	; 243
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <startLCD+0x58>
 130:	00 c0       	rjmp	.+0      	; 0x132 <startLCD+0x5e>
 132:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low,  RS stays low (it will execute the command now)
 134:	15 ba       	out	0x15, r1	; 21
 136:	e3 ef       	ldi	r30, 0xF3	; 243
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <startLCD+0x66>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <startLCD+0x6c>
 140:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00100000; //enable is high, RS is low (I'm going to send another command)
 142:	85 bb       	out	0x15, r24	; 21
 144:	83 ef       	ldi	r24, 0xF3	; 243
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <startLCD+0x74>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <startLCD+0x7a>
 14e:	00 00       	nop
	_delay_ms(2);
	PORTD=0b01100000; //command 3: character entry mode with increment and display shift OFF
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	82 bb       	out	0x12, r24	; 18
 154:	e3 ef       	ldi	r30, 0xF3	; 243
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <startLCD+0x84>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <startLCD+0x8a>
 15e:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low, RS stays low (it will execute the command now)
 160:	15 ba       	out	0x15, r1	; 21
	
	
	//now i am going to enter a real character
}
 162:	08 95       	ret

00000164 <returnLCD>:
void returnLCD()   // this function is used to move the cursor to first (initial) position
{
	DDRC=0b00110000; //portc has RS on bit 4, and enable on bit 5
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	94 bb       	out	0x14, r25	; 20
	DDRD=0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	ef e4       	ldi	r30, 0x4F	; 79
 16e:	f3 ec       	ldi	r31, 0xC3	; 195
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <returnLCD+0xc>
 174:	00 c0       	rjmp	.+0      	; 0x176 <returnLCD+0x12>
 176:	00 00       	nop
	_delay_ms(200); //wait a little bit of time for the LCD to power up properly.
	
	//initialisation of LCD screen
	PORTC=0b00100000; //enable is high, RS is low (I'm going to send a command)
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	e3 ef       	ldi	r30, 0xF3	; 243
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <returnLCD+0x1c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <returnLCD+0x22>
 186:	00 00       	nop
	_delay_ms(2);
	PORTD=0b00011100; //command1: function set (5x7 dot format, 2 line mode, 8-bit data)
 188:	2c e1       	ldi	r18, 0x1C	; 28
 18a:	22 bb       	out	0x12, r18	; 18
 18c:	e3 ef       	ldi	r30, 0xF3	; 243
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <returnLCD+0x2c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <returnLCD+0x32>
 196:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low, RS stays low (it will execute the command now)
 198:	15 ba       	out	0x15, r1	; 21
 19a:	e3 ef       	ldi	r30, 0xF3	; 243
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <returnLCD+0x3a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <returnLCD+0x40>
 1a4:	00 00       	nop
	_delay_ms(2);
 	PORTC=0b00100000; //enable is high, RS is low (I'm going to send another command)
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	e3 ef       	ldi	r30, 0xF3	; 243
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <returnLCD+0x48>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <returnLCD+0x4e>
 1b2:	00 00       	nop
 	_delay_ms(2);
 	PORTD=0b11110000; //command2: display on / cursor (Blink ON, underline ON, Display ON - you can use different settings if you like)
 1b4:	20 ef       	ldi	r18, 0xF0	; 240
 1b6:	22 bb       	out	0x12, r18	; 18
 1b8:	e3 ef       	ldi	r30, 0xF3	; 243
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <returnLCD+0x58>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <returnLCD+0x5e>
 1c2:	00 00       	nop
 	_delay_ms(2);
 	PORTC=0b00000000; //enable is low,  RS stays low (it will execute the command now)
 1c4:	15 ba       	out	0x15, r1	; 21
 1c6:	e3 ef       	ldi	r30, 0xF3	; 243
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <returnLCD+0x66>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <returnLCD+0x6c>
 1d0:	00 00       	nop
 	_delay_ms(2);
 	PORTC=0b00100000; //enable is high, RS is low (I'm going to send another command)
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	e3 ef       	ldi	r30, 0xF3	; 243
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <returnLCD+0x74>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <returnLCD+0x7a>
 1de:	00 00       	nop
 	_delay_ms(2);
 	PORTD=0b01100000; //command 3: character entry mode with increment and display shift OFF
 1e0:	20 e6       	ldi	r18, 0x60	; 96
 1e2:	22 bb       	out	0x12, r18	; 18
 1e4:	e3 ef       	ldi	r30, 0xF3	; 243
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <returnLCD+0x84>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <returnLCD+0x8a>
 1ee:	00 00       	nop
 	_delay_ms(2);
 	PORTC=0b00000000; //enable is low, RS stays low (it will execute the command now)
 1f0:	15 ba       	out	0x15, r1	; 21
 1f2:	e3 ef       	ldi	r30, 0xF3	; 243
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <returnLCD+0x92>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <returnLCD+0x98>
 1fc:	00 00       	nop
 	_delay_ms(2);
	PORTC=0b00100000; //enable is high, RS is low (I'm going to send another command)
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	e3 ef       	ldi	r30, 0xF3	; 243
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <returnLCD+0xa0>
 208:	00 c0       	rjmp	.+0      	; 0x20a <returnLCD+0xa6>
 20a:	00 00       	nop
	_delay_ms(2);
	PORTD=0b10000000; //command 4: clear screen
 20c:	20 e8       	ldi	r18, 0x80	; 128
 20e:	22 bb       	out	0x12, r18	; 18
 210:	e3 ef       	ldi	r30, 0xF3	; 243
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <returnLCD+0xb0>
 218:	00 c0       	rjmp	.+0      	; 0x21a <returnLCD+0xb6>
 21a:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low
 21c:	15 ba       	out	0x15, r1	; 21
 21e:	e3 ef       	ldi	r30, 0xF3	; 243
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <returnLCD+0xbe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <returnLCD+0xc4>
 228:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00100000; //enable is high
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	e3 ef       	ldi	r30, 0xF3	; 243
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <returnLCD+0xcc>
 234:	00 c0       	rjmp	.+0      	; 0x236 <returnLCD+0xd2>
 236:	00 00       	nop
	_delay_ms(2);
	PORTD=0b01000000; //command 5 (take display cursor home)
 238:	20 e4       	ldi	r18, 0x40	; 64
 23a:	22 bb       	out	0x12, r18	; 18
 23c:	e3 ef       	ldi	r30, 0xF3	; 243
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <returnLCD+0xdc>
 244:	00 c0       	rjmp	.+0      	; 0x246 <returnLCD+0xe2>
 246:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00000000; //enable is low
 248:	15 ba       	out	0x15, r1	; 21
 24a:	e3 ef       	ldi	r30, 0xF3	; 243
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <returnLCD+0xea>
 252:	00 c0       	rjmp	.+0      	; 0x254 <returnLCD+0xf0>
 254:	00 00       	nop
	_delay_ms(2);
	PORTC=0b00100000; //enable is high
 256:	85 bb       	out	0x15, r24	; 21
	
	//_delay_ms(100); //wait a little longer after initialisation (may not be required, but it seems to help)
	
	//now i am going to enter a real character
	PORTC=0b00110000; //enable is high, with RS high (I'm going to send data)
 258:	95 bb       	out	0x15, r25	; 21
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <returnLCD+0xfa>
 262:	00 c0       	rjmp	.+0      	; 0x264 <returnLCD+0x100>
 264:	00 00       	nop
	_delay_ms(5);
	

}
 266:	08 95       	ret

00000268 <display>:
 268:	e1 ee       	ldi	r30, 0xE1	; 225
 26a:	f4 e0       	ldi	r31, 0x04	; 4
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <display+0x4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <display+0xa>
 272:	00 00       	nop

void display( char m )  // this function is used to display letters.	Input: variable m, type: char
// For example, display('A') will display letter 'A' on LCD screen
{
	_delay_ms(5);
	PORTC=0b00110000;
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	95 bb       	out	0x15, r25	; 21
 278:	e1 ee       	ldi	r30, 0xE1	; 225
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <display+0x14>
 280:	00 c0       	rjmp	.+0      	; 0x282 <display+0x1a>
 282:	00 00       	nop
	//enable is high, with RS high (I'm going to send data)
	_delay_ms(5);
	switch(m)
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	80 97       	sbiw	r24, 0x20	; 32
 288:	8b 33       	cpi	r24, 0x3B	; 59
 28a:	91 05       	cpc	r25, r1
 28c:	08 f0       	brcs	.+2      	; 0x290 <display+0x28>
 28e:	79 c0       	rjmp	.+242    	; 0x382 <display+0x11a>
 290:	8d 5e       	subi	r24, 0xED	; 237
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	08 95       	ret
	{
		case 'A':	{	PORTD=0b10000010;
 29a:	82 e8       	ldi	r24, 0x82	; 130
 29c:	82 bb       	out	0x12, r24	; 18
	break;		}
 29e:	71 c0       	rjmp	.+226    	; 0x382 <display+0x11a>
	case 'B': 	{	PORTD=0B01000010;
 2a0:	82 e4       	ldi	r24, 0x42	; 66
 2a2:	82 bb       	out	0x12, r24	; 18
break;		}
 2a4:	6e c0       	rjmp	.+220    	; 0x382 <display+0x11a>
case 'C':   {	PORTD=0B11000010;
 2a6:	82 ec       	ldi	r24, 0xC2	; 194
 2a8:	82 bb       	out	0x12, r24	; 18
							break;		}
 2aa:	6b c0       	rjmp	.+214    	; 0x382 <display+0x11a>
		case 'D':   {	PORTD=0b00100010;
 2ac:	82 e2       	ldi	r24, 0x22	; 34
 2ae:	82 bb       	out	0x12, r24	; 18
							break;		}
 2b0:	68 c0       	rjmp	.+208    	; 0x382 <display+0x11a>
		case 'E':   {	PORTD=0b10100010;	
 2b2:	82 ea       	ldi	r24, 0xA2	; 162
 2b4:	82 bb       	out	0x12, r24	; 18
							break;		}
 2b6:	65 c0       	rjmp	.+202    	; 0x382 <display+0x11a>
		case 'F':	{	PORTD=0b01100010;
 2b8:	82 e6       	ldi	r24, 0x62	; 98
 2ba:	82 bb       	out	0x12, r24	; 18
							break;		}
 2bc:	62 c0       	rjmp	.+196    	; 0x382 <display+0x11a>
		case 'G': 	{	PORTD=0b11100010;
 2be:	82 ee       	ldi	r24, 0xE2	; 226
 2c0:	82 bb       	out	0x12, r24	; 18
							break;		}		
 2c2:	5f c0       	rjmp	.+190    	; 0x382 <display+0x11a>
		case 'H':   {	PORTD=0b00010010; 
 2c4:	82 e1       	ldi	r24, 0x12	; 18
 2c6:	82 bb       	out	0x12, r24	; 18
							break;		}		
 2c8:	5c c0       	rjmp	.+184    	; 0x382 <display+0x11a>
		case 'I':    {	PORTD=0b10010010; 
 2ca:	82 e9       	ldi	r24, 0x92	; 146
 2cc:	82 bb       	out	0x12, r24	; 18
							break;		}	
 2ce:	59 c0       	rjmp	.+178    	; 0x382 <display+0x11a>
		case 'J':    {	PORTD=0b01010010; 
 2d0:	82 e5       	ldi	r24, 0x52	; 82
 2d2:	82 bb       	out	0x12, r24	; 18
							break;		}	
 2d4:	56 c0       	rjmp	.+172    	; 0x382 <display+0x11a>
		case 'K':	{	PORTD=0b11010010; 
 2d6:	82 ed       	ldi	r24, 0xD2	; 210
 2d8:	82 bb       	out	0x12, r24	; 18
							break;		}	
 2da:	53 c0       	rjmp	.+166    	; 0x382 <display+0x11a>
		case 'L':	{	PORTD=0b00110010; 
 2dc:	82 e3       	ldi	r24, 0x32	; 50
 2de:	82 bb       	out	0x12, r24	; 18
							break;		}	
 2e0:	50 c0       	rjmp	.+160    	; 0x382 <display+0x11a>
		case 'M':   {	PORTD=0b10110010; 
 2e2:	82 eb       	ldi	r24, 0xB2	; 178
 2e4:	82 bb       	out	0x12, r24	; 18
							break;		}	
 2e6:	4d c0       	rjmp	.+154    	; 0x382 <display+0x11a>
		case 'N':   {	PORTD=0b01110010; 
 2e8:	82 e7       	ldi	r24, 0x72	; 114
 2ea:	82 bb       	out	0x12, r24	; 18
							break;		}
 2ec:	4a c0       	rjmp	.+148    	; 0x382 <display+0x11a>
		case 'O':	{	PORTD=0b11110010; 
 2ee:	82 ef       	ldi	r24, 0xF2	; 242
 2f0:	82 bb       	out	0x12, r24	; 18
							break;		}
 2f2:	47 c0       	rjmp	.+142    	; 0x382 <display+0x11a>
	    case 'P':	{	PORTD=0b00001010; 
 2f4:	8a e0       	ldi	r24, 0x0A	; 10
 2f6:	82 bb       	out	0x12, r24	; 18
							break;		}
 2f8:	44 c0       	rjmp	.+136    	; 0x382 <display+0x11a>
		case 'Q':   {	PORTD=0b10001010; 
 2fa:	8a e8       	ldi	r24, 0x8A	; 138
 2fc:	82 bb       	out	0x12, r24	; 18
							break;		}
 2fe:	41 c0       	rjmp	.+130    	; 0x382 <display+0x11a>
		case 'R':	{	PORTD=0b01001010; 
 300:	8a e4       	ldi	r24, 0x4A	; 74
 302:	82 bb       	out	0x12, r24	; 18
							break;		}
 304:	3e c0       	rjmp	.+124    	; 0x382 <display+0x11a>
		case 'S':	{	PORTD=0b11001010; 
 306:	8a ec       	ldi	r24, 0xCA	; 202
 308:	82 bb       	out	0x12, r24	; 18
							break;		}
 30a:	3b c0       	rjmp	.+118    	; 0x382 <display+0x11a>
		case 'T':   {	PORTD=0b00101010; 
 30c:	8a e2       	ldi	r24, 0x2A	; 42
 30e:	82 bb       	out	0x12, r24	; 18
							break;		}
 310:	38 c0       	rjmp	.+112    	; 0x382 <display+0x11a>
	    case 'U':   {	PORTD=0b10101010; 
 312:	8a ea       	ldi	r24, 0xAA	; 170
 314:	82 bb       	out	0x12, r24	; 18
							break;		}
 316:	35 c0       	rjmp	.+106    	; 0x382 <display+0x11a>
		case 'V':   {	PORTD=0b01101010; 
 318:	8a e6       	ldi	r24, 0x6A	; 106
 31a:	82 bb       	out	0x12, r24	; 18
							break;		}
 31c:	32 c0       	rjmp	.+100    	; 0x382 <display+0x11a>
		case 'W':   {	PORTD=0b11101010; 
 31e:	8a ee       	ldi	r24, 0xEA	; 234
 320:	82 bb       	out	0x12, r24	; 18
							break;		}
 322:	2f c0       	rjmp	.+94     	; 0x382 <display+0x11a>
		case 'X': 	{	PORTD=0b00011010; 
 324:	8a e1       	ldi	r24, 0x1A	; 26
 326:	82 bb       	out	0x12, r24	; 18
							break;		}
 328:	2c c0       	rjmp	.+88     	; 0x382 <display+0x11a>
		case 'Y':	{	PORTD=0b10011010; 
 32a:	8a e9       	ldi	r24, 0x9A	; 154
 32c:	82 bb       	out	0x12, r24	; 18
							break;		}
 32e:	29 c0       	rjmp	.+82     	; 0x382 <display+0x11a>
		case 'Z':	{	PORTD=0b01011010; 
 330:	8a e5       	ldi	r24, 0x5A	; 90
 332:	82 bb       	out	0x12, r24	; 18
							break;		}
 334:	26 c0       	rjmp	.+76     	; 0x382 <display+0x11a>
		case '1':	{	PORTD=0b10001100; //1
 336:	8c e8       	ldi	r24, 0x8C	; 140
 338:	82 bb       	out	0x12, r24	; 18
							break;		}		
 33a:	23 c0       	rjmp	.+70     	; 0x382 <display+0x11a>
		case '2':	{	PORTD=0b01001100; //2
 33c:	8c e4       	ldi	r24, 0x4C	; 76
 33e:	82 bb       	out	0x12, r24	; 18
							break;		}				
 340:	20 c0       	rjmp	.+64     	; 0x382 <display+0x11a>
		case '3':	{	PORTD=0b11001100; //3
 342:	8c ec       	ldi	r24, 0xCC	; 204
 344:	82 bb       	out	0x12, r24	; 18
							break;		}						
 346:	1d c0       	rjmp	.+58     	; 0x382 <display+0x11a>
		case '4':   {	PORTD=0b00101100; //4
 348:	8c e2       	ldi	r24, 0x2C	; 44
 34a:	82 bb       	out	0x12, r24	; 18
							break;		}						
 34c:	1a c0       	rjmp	.+52     	; 0x382 <display+0x11a>
		case '5':   {	PORTD=0b10101100; //5
 34e:	8c ea       	ldi	r24, 0xAC	; 172
 350:	82 bb       	out	0x12, r24	; 18
							break;		}						
 352:	17 c0       	rjmp	.+46     	; 0x382 <display+0x11a>
		case '6':	{	PORTD=0b01101100; //6
 354:	8c e6       	ldi	r24, 0x6C	; 108
 356:	82 bb       	out	0x12, r24	; 18
							break;		}					
 358:	14 c0       	rjmp	.+40     	; 0x382 <display+0x11a>
		case '7':	{	PORTD=0b11101100; //7
 35a:	8c ee       	ldi	r24, 0xEC	; 236
 35c:	82 bb       	out	0x12, r24	; 18
							break;		}	
 35e:	11 c0       	rjmp	.+34     	; 0x382 <display+0x11a>
        case '8':	{	PORTD=0b00011100; //8
 360:	8c e1       	ldi	r24, 0x1C	; 28
 362:	82 bb       	out	0x12, r24	; 18
							break;		}							
 364:	0e c0       	rjmp	.+28     	; 0x382 <display+0x11a>
		case '9':	{	PORTD=0b10011100; //9
 366:	8c e9       	ldi	r24, 0x9C	; 156
 368:	82 bb       	out	0x12, r24	; 18
							break;		}					
 36a:	0b c0       	rjmp	.+22     	; 0x382 <display+0x11a>
		case '0':	{	PORTD=0b00001100; //0
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	82 bb       	out	0x12, r24	; 18
							break;		}							 
 370:	08 c0       	rjmp	.+16     	; 0x382 <display+0x11a>
		case ':':	{	PORTD=0b01011100; //:
 372:	8c e5       	ldi	r24, 0x5C	; 92
 374:	82 bb       	out	0x12, r24	; 18
							break;		} 
 376:	05 c0       	rjmp	.+10     	; 0x382 <display+0x11a>
		case ' ':	{	PORTD=0b00000100; //space
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	82 bb       	out	0x12, r24	; 18
							break;		} 		 							
 37c:	02 c0       	rjmp	.+4      	; 0x382 <display+0x11a>
		case '.':	{	PORTD=0b01110100; //.
 37e:	84 e7       	ldi	r24, 0x74	; 116
 380:	82 bb       	out	0x12, r24	; 18
 382:	81 ee       	ldi	r24, 0xE1	; 225
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <display+0x11e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <display+0x124>
 38c:	00 00       	nop
							break;		}
		 }	
							
							_delay_ms(5);
							PORTC=0b00010000; //enable is low, with RS high
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	85 bb       	out	0x15, r24	; 21
 392:	e1 ee       	ldi	r30, 0xE1	; 225
 394:	f4 e0       	ldi	r31, 0x04	; 4
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <display+0x12e>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <display+0x134>
 39c:	00 00       	nop
							_delay_ms(5);
							PORTC=0b00110000; //enable is high, with RS high (ready to send more data)
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	85 bb       	out	0x15, r24	; 21
 }	
 3a2:	08 95       	ret

000003a4 <printSDNN>:
	
	
}


void printSDNN () {
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	
	int i, diff, sq =0;
	
	if (calculateSDNN==true) {
 3ac:	80 91 64 00 	lds	r24, 0x0064
 3b0:	90 91 65 00 	lds	r25, 0x0065
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	91 05       	cpc	r25, r1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <printSDNN+0x18>
 3ba:	4e c0       	rjmp	.+156    	; 0x458 <printSDNN+0xb4>
		
		for (i = 0; i < indexOfTimeIntervalVector; i++) {
 3bc:	80 91 74 00 	lds	r24, 0x0074
 3c0:	90 91 75 00 	lds	r25, 0x0075
 3c4:	18 16       	cp	r1, r24
 3c6:	19 06       	cpc	r1, r25
 3c8:	34 f5       	brge	.+76     	; 0x416 <printSDNN+0x72>
 3ca:	a0 e0       	ldi	r26, 0x00	; 0
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
			
			diff = (timeIntervalForAllBeats[i] - MNN);
 3d2:	68 e7       	ldi	r22, 0x78	; 120
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	fa 01       	movw	r30, r20
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e6 0f       	add	r30, r22
 3de:	f7 1f       	adc	r31, r23
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	20 91 6c 00 	lds	r18, 0x006C
 3e8:	30 91 6d 00 	lds	r19, 0x006D
 3ec:	82 1b       	sub	r24, r18
 3ee:	93 0b       	sbc	r25, r19
			
			sq += (diff*diff); // = (diff)^2
 3f0:	88 9f       	mul	r24, r24
 3f2:	90 01       	movw	r18, r0
 3f4:	89 9f       	mul	r24, r25
 3f6:	30 0d       	add	r19, r0
 3f8:	98 9f       	mul	r25, r24
 3fa:	30 0d       	add	r19, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	a2 0f       	add	r26, r18
 400:	b3 1f       	adc	r27, r19
	
	int i, diff, sq =0;
	
	if (calculateSDNN==true) {
		
		for (i = 0; i < indexOfTimeIntervalVector; i++) {
 402:	4f 5f       	subi	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	80 91 74 00 	lds	r24, 0x0074
 40a:	90 91 75 00 	lds	r25, 0x0075
 40e:	48 17       	cp	r20, r24
 410:	59 07       	cpc	r21, r25
 412:	0c f3       	brlt	.-62     	; 0x3d6 <printSDNN+0x32>
 414:	02 c0       	rjmp	.+4      	; 0x41a <printSDNN+0x76>
 416:	a0 e0       	ldi	r26, 0x00	; 0
 418:	b0 e0       	ldi	r27, 0x00	; 0
			
			sq += (diff*diff); // = (diff)^2
			
		}
		
		variance = sq/(indexOfTimeIntervalVector-1);
 41a:	60 91 74 00 	lds	r22, 0x0074
 41e:	70 91 75 00 	lds	r23, 0x0075
 422:	61 50       	subi	r22, 0x01	; 1
 424:	70 40       	sbci	r23, 0x00	; 0
 426:	cd 01       	movw	r24, r26
 428:	ec d4       	rcall	.+2520   	; 0xe02 <__divmodhi4>
 42a:	70 93 67 00 	sts	0x0067, r23
 42e:	60 93 66 00 	sts	0x0066, r22
		calculateSDNN = false;
 432:	10 92 65 00 	sts	0x0065, r1
 436:	10 92 64 00 	sts	0x0064, r1
		SDNN = sqrt(variance);
 43a:	60 91 66 00 	lds	r22, 0x0066
 43e:	70 91 67 00 	lds	r23, 0x0067
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	e1 d3       	rcall	.+1986   	; 0xc0a <__floatunsisf>
 448:	4e d4       	rcall	.+2204   	; 0xce6 <sqrt>
 44a:	b3 d3       	rcall	.+1894   	; 0xbb2 <__fixunssfsi>
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	90 93 6b 00 	sts	0x006B, r25
 454:	80 93 6a 00 	sts	0x006A, r24
		
	}	
	
	
	
	SDNNinDigits[0] = (SDNN%10)+'0';
 458:	80 91 6a 00 	lds	r24, 0x006A
 45c:	90 91 6b 00 	lds	r25, 0x006B
 460:	2a e0       	ldi	r18, 0x0A	; 10
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	b9 01       	movw	r22, r18
 466:	b9 d4       	rcall	.+2418   	; 0xdda <__udivmodhi4>
 468:	c0 96       	adiw	r24, 0x30	; 48
 46a:	90 93 69 01 	sts	0x0169, r25
 46e:	80 93 68 01 	sts	0x0168, r24
	SDNNinDigits[1] = ((SDNN%100-SDNN%10)/10)+'0';
 472:	80 91 6a 00 	lds	r24, 0x006A
 476:	90 91 6b 00 	lds	r25, 0x006B
 47a:	e0 91 6a 00 	lds	r30, 0x006A
 47e:	f0 91 6b 00 	lds	r31, 0x006B
 482:	04 e6       	ldi	r16, 0x64	; 100
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	b8 01       	movw	r22, r16
 488:	a8 d4       	rcall	.+2384   	; 0xdda <__udivmodhi4>
 48a:	ec 01       	movw	r28, r24
 48c:	cf 01       	movw	r24, r30
 48e:	b9 01       	movw	r22, r18
 490:	a4 d4       	rcall	.+2376   	; 0xdda <__udivmodhi4>
 492:	ae 01       	movw	r20, r28
 494:	48 1b       	sub	r20, r24
 496:	59 0b       	sbc	r21, r25
 498:	ca 01       	movw	r24, r20
 49a:	b9 01       	movw	r22, r18
 49c:	9e d4       	rcall	.+2364   	; 0xdda <__udivmodhi4>
 49e:	60 5d       	subi	r22, 0xD0	; 208
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	70 93 6b 01 	sts	0x016B, r23
 4a6:	60 93 6a 01 	sts	0x016A, r22
	SDNNinDigits[2] = ((SDNN%1000-SDNN%100)/100)+'0';
 4aa:	80 91 6a 00 	lds	r24, 0x006A
 4ae:	90 91 6b 00 	lds	r25, 0x006B
 4b2:	20 91 6a 00 	lds	r18, 0x006A
 4b6:	30 91 6b 00 	lds	r19, 0x006B
 4ba:	e8 ee       	ldi	r30, 0xE8	; 232
 4bc:	f3 e0       	ldi	r31, 0x03	; 3
 4be:	bf 01       	movw	r22, r30
 4c0:	8c d4       	rcall	.+2328   	; 0xdda <__udivmodhi4>
 4c2:	ec 01       	movw	r28, r24
 4c4:	c9 01       	movw	r24, r18
 4c6:	b8 01       	movw	r22, r16
 4c8:	88 d4       	rcall	.+2320   	; 0xdda <__udivmodhi4>
 4ca:	9e 01       	movw	r18, r28
 4cc:	28 1b       	sub	r18, r24
 4ce:	39 0b       	sbc	r19, r25
 4d0:	c9 01       	movw	r24, r18
 4d2:	b8 01       	movw	r22, r16
 4d4:	82 d4       	rcall	.+2308   	; 0xdda <__udivmodhi4>
 4d6:	60 5d       	subi	r22, 0xD0	; 208
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	70 93 6d 01 	sts	0x016D, r23
 4de:	60 93 6c 01 	sts	0x016C, r22
	SDNNinDigits[3] = ((SDNN%10000-SDNN%1000)/1000)+'0';
 4e2:	80 91 6a 00 	lds	r24, 0x006A
 4e6:	90 91 6b 00 	lds	r25, 0x006B
 4ea:	20 91 6a 00 	lds	r18, 0x006A
 4ee:	30 91 6b 00 	lds	r19, 0x006B
 4f2:	60 e1       	ldi	r22, 0x10	; 16
 4f4:	77 e2       	ldi	r23, 0x27	; 39
 4f6:	71 d4       	rcall	.+2274   	; 0xdda <__udivmodhi4>
 4f8:	ec 01       	movw	r28, r24
 4fa:	c9 01       	movw	r24, r18
 4fc:	bf 01       	movw	r22, r30
 4fe:	6d d4       	rcall	.+2266   	; 0xdda <__udivmodhi4>
 500:	ae 01       	movw	r20, r28
 502:	48 1b       	sub	r20, r24
 504:	59 0b       	sbc	r21, r25
 506:	ca 01       	movw	r24, r20
 508:	bf 01       	movw	r22, r30
 50a:	67 d4       	rcall	.+2254   	; 0xdda <__udivmodhi4>
 50c:	60 5d       	subi	r22, 0xD0	; 208
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	70 93 6f 01 	sts	0x016F, r23
 514:	60 93 6e 01 	sts	0x016E, r22
	
	display(' ');
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	a6 de       	rcall	.-692    	; 0x268 <display>
	display('S');
 51c:	83 e5       	ldi	r24, 0x53	; 83
 51e:	a4 de       	rcall	.-696    	; 0x268 <display>
	display('D');
 520:	84 e4       	ldi	r24, 0x44	; 68
 522:	a2 de       	rcall	.-700    	; 0x268 <display>
	
	display(SDNNinDigits[3]);
 524:	80 91 6e 01 	lds	r24, 0x016E
 528:	90 91 6f 01 	lds	r25, 0x016F
 52c:	9d de       	rcall	.-710    	; 0x268 <display>
	display('.');
 52e:	8e e2       	ldi	r24, 0x2E	; 46
 530:	9b de       	rcall	.-714    	; 0x268 <display>
	display(SDNNinDigits[2]);
 532:	80 91 6c 01 	lds	r24, 0x016C
 536:	90 91 6d 01 	lds	r25, 0x016D
 53a:	96 de       	rcall	.-724    	; 0x268 <display>
	display(SDNNinDigits[1]);
 53c:	80 91 6a 01 	lds	r24, 0x016A
 540:	90 91 6b 01 	lds	r25, 0x016B
 544:	91 de       	rcall	.-734    	; 0x268 <display>
	display(SDNNinDigits[0]);
 546:	80 91 68 01 	lds	r24, 0x0168
 54a:	90 91 69 01 	lds	r25, 0x0169
 54e:	8c de       	rcall	.-744    	; 0x268 <display>
	
	}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <printMNN>:
		display(HRinDigits[0]);

}


void printMNN () {
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
	
	if (calculateMNN==true) {
 562:	80 91 70 00 	lds	r24, 0x0070
 566:	90 91 71 00 	lds	r25, 0x0071
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	29 f5       	brne	.+74     	; 0x5ba <printMNN+0x60>
 
		MNN = sumOFTimeIntervalsForAllBeats/(heartBeatTrackerForMNN-1); // MNN will be calculated every 15 seconds
 570:	80 91 76 00 	lds	r24, 0x0076
 574:	90 91 77 00 	lds	r25, 0x0077
 578:	60 91 50 01 	lds	r22, 0x0150
 57c:	70 91 51 01 	lds	r23, 0x0151
 580:	61 50       	subi	r22, 0x01	; 1
 582:	70 40       	sbci	r23, 0x00	; 0
 584:	3e d4       	rcall	.+2172   	; 0xe02 <__divmodhi4>
 586:	70 93 6d 00 	sts	0x006D, r23
 58a:	60 93 6c 00 	sts	0x006C, r22
		sumOFTimeIntervalsForAllBeats = 0;
 58e:	10 92 77 00 	sts	0x0077, r1
 592:	10 92 76 00 	sts	0x0076, r1
		heartBeatTrackerForMNN = 0;
 596:	10 92 51 01 	sts	0x0151, r1
 59a:	10 92 50 01 	sts	0x0150, r1
		calculateMNN = false;
 59e:	10 92 71 00 	sts	0x0071, r1
 5a2:	10 92 70 00 	sts	0x0070, r1
		indexOfTimeIntervalVector = 0;
 5a6:	10 92 75 00 	sts	0x0075, r1
 5aa:	10 92 74 00 	sts	0x0074, r1
		
		calculateSDNN = true;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	90 93 65 00 	sts	0x0065, r25
 5b6:	80 93 64 00 	sts	0x0064, r24
	}
	
	MNNinDigits[0] = (MNN%10)+'0';
 5ba:	80 91 6c 00 	lds	r24, 0x006C
 5be:	90 91 6d 00 	lds	r25, 0x006D
 5c2:	2a e0       	ldi	r18, 0x0A	; 10
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	08 d4       	rcall	.+2064   	; 0xdda <__udivmodhi4>
 5ca:	c0 96       	adiw	r24, 0x30	; 48
 5cc:	90 93 71 01 	sts	0x0171, r25
 5d0:	80 93 70 01 	sts	0x0170, r24
	MNNinDigits[1] = ((MNN%100-MNN%10)/10)+'0';
 5d4:	80 91 6c 00 	lds	r24, 0x006C
 5d8:	90 91 6d 00 	lds	r25, 0x006D
 5dc:	e0 91 6c 00 	lds	r30, 0x006C
 5e0:	f0 91 6d 00 	lds	r31, 0x006D
 5e4:	04 e6       	ldi	r16, 0x64	; 100
 5e6:	10 e0       	ldi	r17, 0x00	; 0
 5e8:	b8 01       	movw	r22, r16
 5ea:	f7 d3       	rcall	.+2030   	; 0xdda <__udivmodhi4>
 5ec:	ec 01       	movw	r28, r24
 5ee:	cf 01       	movw	r24, r30
 5f0:	b9 01       	movw	r22, r18
 5f2:	f3 d3       	rcall	.+2022   	; 0xdda <__udivmodhi4>
 5f4:	ae 01       	movw	r20, r28
 5f6:	48 1b       	sub	r20, r24
 5f8:	59 0b       	sbc	r21, r25
 5fa:	ca 01       	movw	r24, r20
 5fc:	b9 01       	movw	r22, r18
 5fe:	ed d3       	rcall	.+2010   	; 0xdda <__udivmodhi4>
 600:	60 5d       	subi	r22, 0xD0	; 208
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	70 93 73 01 	sts	0x0173, r23
 608:	60 93 72 01 	sts	0x0172, r22
	MNNinDigits[2] = ((MNN%1000-MNN%100)/100)+'0';
 60c:	80 91 6c 00 	lds	r24, 0x006C
 610:	90 91 6d 00 	lds	r25, 0x006D
 614:	20 91 6c 00 	lds	r18, 0x006C
 618:	30 91 6d 00 	lds	r19, 0x006D
 61c:	c8 ee       	ldi	r28, 0xE8	; 232
 61e:	d3 e0       	ldi	r29, 0x03	; 3
 620:	be 01       	movw	r22, r28
 622:	db d3       	rcall	.+1974   	; 0xdda <__udivmodhi4>
 624:	fc 01       	movw	r30, r24
 626:	c9 01       	movw	r24, r18
 628:	b8 01       	movw	r22, r16
 62a:	d7 d3       	rcall	.+1966   	; 0xdda <__udivmodhi4>
 62c:	9f 01       	movw	r18, r30
 62e:	28 1b       	sub	r18, r24
 630:	39 0b       	sbc	r19, r25
 632:	c9 01       	movw	r24, r18
 634:	b8 01       	movw	r22, r16
 636:	d1 d3       	rcall	.+1954   	; 0xdda <__udivmodhi4>
 638:	60 5d       	subi	r22, 0xD0	; 208
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	70 93 75 01 	sts	0x0175, r23
 640:	60 93 74 01 	sts	0x0174, r22
	MNNinDigits[3] = ((MNN%10000-MNN%1000)/1000)+'0';
 644:	80 91 6c 00 	lds	r24, 0x006C
 648:	90 91 6d 00 	lds	r25, 0x006D
 64c:	20 91 6c 00 	lds	r18, 0x006C
 650:	30 91 6d 00 	lds	r19, 0x006D
 654:	60 e1       	ldi	r22, 0x10	; 16
 656:	77 e2       	ldi	r23, 0x27	; 39
 658:	c0 d3       	rcall	.+1920   	; 0xdda <__udivmodhi4>
 65a:	fc 01       	movw	r30, r24
 65c:	c9 01       	movw	r24, r18
 65e:	be 01       	movw	r22, r28
 660:	bc d3       	rcall	.+1912   	; 0xdda <__udivmodhi4>
 662:	af 01       	movw	r20, r30
 664:	48 1b       	sub	r20, r24
 666:	59 0b       	sbc	r21, r25
 668:	ca 01       	movw	r24, r20
 66a:	be 01       	movw	r22, r28
 66c:	b6 d3       	rcall	.+1900   	; 0xdda <__udivmodhi4>
 66e:	60 5d       	subi	r22, 0xD0	; 208
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	70 93 77 01 	sts	0x0177, r23
 676:	60 93 76 01 	sts	0x0176, r22
	
	display('M');
 67a:	8d e4       	ldi	r24, 0x4D	; 77
 67c:	f5 dd       	rcall	.-1046   	; 0x268 <display>
	display('N');
 67e:	8e e4       	ldi	r24, 0x4E	; 78
 680:	f3 dd       	rcall	.-1050   	; 0x268 <display>
	display('N');
 682:	8e e4       	ldi	r24, 0x4E	; 78
 684:	f1 dd       	rcall	.-1054   	; 0x268 <display>
	//display(':');
	
	display(MNNinDigits[3]);
 686:	80 91 76 01 	lds	r24, 0x0176
 68a:	90 91 77 01 	lds	r25, 0x0177
 68e:	ec dd       	rcall	.-1064   	; 0x268 <display>
	display('.');
 690:	8e e2       	ldi	r24, 0x2E	; 46
 692:	ea dd       	rcall	.-1068   	; 0x268 <display>
	display(MNNinDigits[2]);
 694:	80 91 74 01 	lds	r24, 0x0174
 698:	90 91 75 01 	lds	r25, 0x0175
 69c:	e5 dd       	rcall	.-1078   	; 0x268 <display>
	display(MNNinDigits[1]);
 69e:	80 91 72 01 	lds	r24, 0x0172
 6a2:	90 91 73 01 	lds	r25, 0x0173
 6a6:	e0 dd       	rcall	.-1088   	; 0x268 <display>
	display(MNNinDigits[0]);
 6a8:	80 91 70 01 	lds	r24, 0x0170
 6ac:	90 91 71 01 	lds	r25, 0x0171
 6b0:	db dd       	rcall	.-1098   	; 0x268 <display>
	
	
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	08 95       	ret

000006bc <printHeartRate>:
		display(beatsInDigits[1]);
		display(beatsInDigits[0]);		// Display number of digits

}

void printHeartRate () {
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
	
		display('H');
 6c4:	88 e4       	ldi	r24, 0x48	; 72
 6c6:	d0 dd       	rcall	.-1120   	; 0x268 <display>
		display('R');
 6c8:	82 e5       	ldi	r24, 0x52	; 82
 6ca:	ce dd       	rcall	.-1124   	; 0x268 <display>
	
		if (calculateHeartRate==true) {
 6cc:	80 91 72 00 	lds	r24, 0x0072
 6d0:	90 91 73 00 	lds	r25, 0x0073
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	91 05       	cpc	r25, r1
 6d8:	c1 f4       	brne	.+48     	; 0x70a <printHeartRate+0x4e>
			
			HR = (heartBeatInLast15Sec*60)/15;
 6da:	40 91 4e 01 	lds	r20, 0x014E
 6de:	50 91 4f 01 	lds	r21, 0x014F
 6e2:	2c e3       	ldi	r18, 0x3C	; 60
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	42 9f       	mul	r20, r18
 6e8:	c0 01       	movw	r24, r0
 6ea:	43 9f       	mul	r20, r19
 6ec:	90 0d       	add	r25, r0
 6ee:	52 9f       	mul	r21, r18
 6f0:	90 0d       	add	r25, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	6f e0       	ldi	r22, 0x0F	; 15
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	84 d3       	rcall	.+1800   	; 0xe02 <__divmodhi4>
 6fa:	70 93 6f 00 	sts	0x006F, r23
 6fe:	60 93 6e 00 	sts	0x006E, r22
			heartBeatInLast15Sec = 0; // reset this every 15 seconds to count the number of beats for next 15 seconds
 702:	10 92 4f 01 	sts	0x014F, r1
 706:	10 92 4e 01 	sts	0x014E, r1
			
		}
	
		calculateHeartRate = false;
 70a:	10 92 73 00 	sts	0x0073, r1
 70e:	10 92 72 00 	sts	0x0072, r1
		
		HRinDigits[0] = (HR%10)+'0';
 712:	80 91 6e 00 	lds	r24, 0x006E
 716:	90 91 6f 00 	lds	r25, 0x006F
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	b9 01       	movw	r22, r18
 720:	70 d3       	rcall	.+1760   	; 0xe02 <__divmodhi4>
 722:	c0 96       	adiw	r24, 0x30	; 48
 724:	90 93 63 01 	sts	0x0163, r25
 728:	80 93 62 01 	sts	0x0162, r24
		HRinDigits[1] = ((HR%100-HR%10)/10)+'0';
 72c:	80 91 6e 00 	lds	r24, 0x006E
 730:	90 91 6f 00 	lds	r25, 0x006F
 734:	e0 91 6e 00 	lds	r30, 0x006E
 738:	f0 91 6f 00 	lds	r31, 0x006F
 73c:	c4 e6       	ldi	r28, 0x64	; 100
 73e:	d0 e0       	ldi	r29, 0x00	; 0
 740:	be 01       	movw	r22, r28
 742:	5f d3       	rcall	.+1726   	; 0xe02 <__divmodhi4>
 744:	8c 01       	movw	r16, r24
 746:	cf 01       	movw	r24, r30
 748:	b9 01       	movw	r22, r18
 74a:	5b d3       	rcall	.+1718   	; 0xe02 <__divmodhi4>
 74c:	a8 01       	movw	r20, r16
 74e:	48 1b       	sub	r20, r24
 750:	59 0b       	sbc	r21, r25
 752:	ca 01       	movw	r24, r20
 754:	b9 01       	movw	r22, r18
 756:	55 d3       	rcall	.+1706   	; 0xe02 <__divmodhi4>
 758:	60 5d       	subi	r22, 0xD0	; 208
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	70 93 65 01 	sts	0x0165, r23
 760:	60 93 64 01 	sts	0x0164, r22
		HRinDigits[2] = ((HR%1000-HR%100)/100)+'0';
 764:	80 91 6e 00 	lds	r24, 0x006E
 768:	90 91 6f 00 	lds	r25, 0x006F
 76c:	20 91 6e 00 	lds	r18, 0x006E
 770:	30 91 6f 00 	lds	r19, 0x006F
 774:	68 ee       	ldi	r22, 0xE8	; 232
 776:	73 e0       	ldi	r23, 0x03	; 3
 778:	44 d3       	rcall	.+1672   	; 0xe02 <__divmodhi4>
 77a:	fc 01       	movw	r30, r24
 77c:	c9 01       	movw	r24, r18
 77e:	be 01       	movw	r22, r28
 780:	40 d3       	rcall	.+1664   	; 0xe02 <__divmodhi4>
 782:	9f 01       	movw	r18, r30
 784:	28 1b       	sub	r18, r24
 786:	39 0b       	sbc	r19, r25
 788:	c9 01       	movw	r24, r18
 78a:	be 01       	movw	r22, r28
 78c:	3a d3       	rcall	.+1652   	; 0xe02 <__divmodhi4>
 78e:	cb 01       	movw	r24, r22
 790:	c0 96       	adiw	r24, 0x30	; 48
 792:	90 93 67 01 	sts	0x0167, r25
 796:	80 93 66 01 	sts	0x0166, r24
	
		display(HRinDigits[2]);
 79a:	66 dd       	rcall	.-1332   	; 0x268 <display>
		display(HRinDigits[1]);
 79c:	80 91 64 01 	lds	r24, 0x0164
 7a0:	63 dd       	rcall	.-1338   	; 0x268 <display>
		display(HRinDigits[0]);
 7a2:	80 91 62 01 	lds	r24, 0x0162
 7a6:	60 dd       	rcall	.-1344   	; 0x268 <display>

}
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	08 95       	ret

000007b2 <printNumberOfBeats>:
		display(secInDigits[1]);
		display(secInDigits[0]);		// Display number of digits
				
}

void printNumberOfBeats () {
 7b2:	ef 92       	push	r14
 7b4:	ff 92       	push	r15
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
		
		display('B');
 7be:	82 e4       	ldi	r24, 0x42	; 66
 7c0:	53 dd       	rcall	.-1370   	; 0x268 <display>
		
		int beatsInBits = numberOfHeartBeats;
 7c2:	20 91 52 01 	lds	r18, 0x0152
 7c6:	30 91 53 01 	lds	r19, 0x0153
		beatsInDigits[0] = (beatsInBits%10)+'0';
 7ca:	ea e0       	ldi	r30, 0x0A	; 10
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	c9 01       	movw	r24, r18
 7d0:	bf 01       	movw	r22, r30
 7d2:	17 d3       	rcall	.+1582   	; 0xe02 <__divmodhi4>
 7d4:	ec 01       	movw	r28, r24
 7d6:	c0 96       	adiw	r24, 0x30	; 48
 7d8:	90 93 5d 01 	sts	0x015D, r25
 7dc:	80 93 5c 01 	sts	0x015C, r24
		beatsInDigits[1] = ((beatsInBits%100-beatsInBits%10)/10)+'0';
 7e0:	04 e6       	ldi	r16, 0x64	; 100
 7e2:	10 e0       	ldi	r17, 0x00	; 0
 7e4:	c9 01       	movw	r24, r18
 7e6:	b8 01       	movw	r22, r16
 7e8:	0c d3       	rcall	.+1560   	; 0xe02 <__divmodhi4>
 7ea:	7c 01       	movw	r14, r24
 7ec:	8c 1b       	sub	r24, r28
 7ee:	9d 0b       	sbc	r25, r29
 7f0:	bf 01       	movw	r22, r30
 7f2:	07 d3       	rcall	.+1550   	; 0xe02 <__divmodhi4>
 7f4:	60 5d       	subi	r22, 0xD0	; 208
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	70 93 5f 01 	sts	0x015F, r23
 7fc:	60 93 5e 01 	sts	0x015E, r22
		beatsInDigits[2] = ((beatsInBits%1000-beatsInBits%100)/100)+'0';
 800:	c9 01       	movw	r24, r18
 802:	68 ee       	ldi	r22, 0xE8	; 232
 804:	73 e0       	ldi	r23, 0x03	; 3
 806:	fd d2       	rcall	.+1530   	; 0xe02 <__divmodhi4>
 808:	8e 19       	sub	r24, r14
 80a:	9f 09       	sbc	r25, r15
 80c:	b8 01       	movw	r22, r16
 80e:	f9 d2       	rcall	.+1522   	; 0xe02 <__divmodhi4>
 810:	cb 01       	movw	r24, r22
 812:	c0 96       	adiw	r24, 0x30	; 48
 814:	90 93 61 01 	sts	0x0161, r25
 818:	80 93 60 01 	sts	0x0160, r24
		
		display(beatsInDigits[2]);
 81c:	25 dd       	rcall	.-1462   	; 0x268 <display>
		display(beatsInDigits[1]);
 81e:	80 91 5e 01 	lds	r24, 0x015E
 822:	22 dd       	rcall	.-1468   	; 0x268 <display>
		display(beatsInDigits[0]);		// Display number of digits
 824:	80 91 5c 01 	lds	r24, 0x015C
 828:	1f dd       	rcall	.-1474   	; 0x268 <display>

}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	08 95       	ret

00000838 <printTimeElapsed>:
	 
	printSDNN();
	
}

void printTimeElapsed () {
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
		
		display('T');
 840:	84 e5       	ldi	r24, 0x54	; 84
 842:	12 dd       	rcall	.-1500   	; 0x268 <display>
		
		int minInBits = min;
 844:	20 91 48 01 	lds	r18, 0x0148
 848:	30 91 49 01 	lds	r19, 0x0149
		minInDigits[0] = (minInBits%10)+'0';
 84c:	ca e0       	ldi	r28, 0x0A	; 10
 84e:	d0 e0       	ldi	r29, 0x00	; 0
 850:	c9 01       	movw	r24, r18
 852:	be 01       	movw	r22, r28
 854:	d6 d2       	rcall	.+1452   	; 0xe02 <__divmodhi4>
 856:	fc 01       	movw	r30, r24
 858:	ac 01       	movw	r20, r24
 85a:	40 5d       	subi	r20, 0xD0	; 208
 85c:	5f 4f       	sbci	r21, 0xFF	; 255
 85e:	50 93 55 01 	sts	0x0155, r21
 862:	40 93 54 01 	sts	0x0154, r20
		minInDigits[1] = ((minInBits%100-minInBits%10)/10)+'0';
 866:	04 e6       	ldi	r16, 0x64	; 100
 868:	10 e0       	ldi	r17, 0x00	; 0
 86a:	c9 01       	movw	r24, r18
 86c:	b8 01       	movw	r22, r16
 86e:	c9 d2       	rcall	.+1426   	; 0xe02 <__divmodhi4>
 870:	8e 1b       	sub	r24, r30
 872:	9f 0b       	sbc	r25, r31
 874:	be 01       	movw	r22, r28
 876:	c5 d2       	rcall	.+1418   	; 0xe02 <__divmodhi4>
 878:	60 5d       	subi	r22, 0xD0	; 208
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	70 93 57 01 	sts	0x0157, r23
 880:	60 93 56 01 	sts	0x0156, r22
		
		display(minInDigits[0]);
 884:	84 2f       	mov	r24, r20
 886:	f0 dc       	rcall	.-1568   	; 0x268 <display>
		display(':');
 888:	8a e3       	ldi	r24, 0x3A	; 58
 88a:	ee dc       	rcall	.-1572   	; 0x268 <display>
		
		int secInBits = sec;
 88c:	20 91 4a 01 	lds	r18, 0x014A
 890:	30 91 4b 01 	lds	r19, 0x014B
		secInDigits[0] = (secInBits%10)+'0';
 894:	c9 01       	movw	r24, r18
 896:	be 01       	movw	r22, r28
 898:	b4 d2       	rcall	.+1384   	; 0xe02 <__divmodhi4>
 89a:	fc 01       	movw	r30, r24
 89c:	c0 96       	adiw	r24, 0x30	; 48
 89e:	90 93 59 01 	sts	0x0159, r25
 8a2:	80 93 58 01 	sts	0x0158, r24
		secInDigits[1] = ((secInBits%100-secInBits%10)/10)+'0';
 8a6:	c9 01       	movw	r24, r18
 8a8:	b8 01       	movw	r22, r16
 8aa:	ab d2       	rcall	.+1366   	; 0xe02 <__divmodhi4>
 8ac:	8e 1b       	sub	r24, r30
 8ae:	9f 0b       	sbc	r25, r31
 8b0:	be 01       	movw	r22, r28
 8b2:	a7 d2       	rcall	.+1358   	; 0xe02 <__divmodhi4>
 8b4:	cb 01       	movw	r24, r22
 8b6:	c0 96       	adiw	r24, 0x30	; 48
 8b8:	90 93 5b 01 	sts	0x015B, r25
 8bc:	80 93 5a 01 	sts	0x015A, r24
		
		display(secInDigits[1]);
 8c0:	d3 dc       	rcall	.-1626   	; 0x268 <display>
		display(secInDigits[0]);		// Display number of digits
 8c2:	80 91 58 01 	lds	r24, 0x0158
 8c6:	d0 dc       	rcall	.-1632   	; 0x268 <display>
				
}
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <moveToNextLine>:
 8d2:	81 ee       	ldi	r24, 0xE1	; 225
 8d4:	94 e0       	ldi	r25, 0x04	; 4
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <moveToNextLine+0x4>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <moveToNextLine+0xa>
 8dc:	00 00       	nop


void moveToNextLine () {
	
	_delay_ms(5);
	PORTC=0b00100000;
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	85 bb       	out	0x15, r24	; 21
 8e2:	81 ee       	ldi	r24, 0xE1	; 225
 8e4:	94 e0       	ldi	r25, 0x04	; 4
 8e6:	01 97       	sbiw	r24, 0x01	; 1
 8e8:	f1 f7       	brne	.-4      	; 0x8e6 <moveToNextLine+0x14>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <moveToNextLine+0x1a>
 8ec:	00 00       	nop
	_delay_ms(5);
	PORTD=0b00000011;
 8ee:	83 e0       	ldi	r24, 0x03	; 3
 8f0:	82 bb       	out	0x12, r24	; 18
 8f2:	81 ee       	ldi	r24, 0xE1	; 225
 8f4:	94 e0       	ldi	r25, 0x04	; 4
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <moveToNextLine+0x24>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <moveToNextLine+0x2a>
 8fc:	00 00       	nop
	_delay_ms(5);
	PORTC=0b00000000;
 8fe:	15 ba       	out	0x15, r1	; 21
	
}
 900:	08 95       	ret

00000902 <updateLCD>:

volatile static bool calculateSDNN = false;

void updateLCD () {
	
 	returnLCD();
 902:	30 dc       	rcall	.-1952   	; 0x164 <returnLCD>
 	
 	printTimeElapsed();
 904:	99 df       	rcall	.-206    	; 0x838 <printTimeElapsed>
 	
 	display(' '); // space
 906:	80 e2       	ldi	r24, 0x20	; 32
 908:	af dc       	rcall	.-1698   	; 0x268 <display>
 	
 	printNumberOfBeats();
 90a:	53 df       	rcall	.-346    	; 0x7b2 <printNumberOfBeats>
 	
 	display(' '); // space
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	ac dc       	rcall	.-1704   	; 0x268 <display>
 	
 	printHeartRate();
 910:	d5 de       	rcall	.-598    	; 0x6bc <printHeartRate>
 	
 	moveToNextLine();
 912:	df df       	rcall	.-66     	; 0x8d2 <moveToNextLine>
 	
 	printMNN();
 914:	22 de       	rcall	.-956    	; 0x55a <printMNN>
	 
	printSDNN();
 916:	46 dd       	rcall	.-1396   	; 0x3a4 <printSDNN>
	
}
 918:	08 95       	ret

0000091a <__vector_9>:

volatile static bool calculateHeartRate = false; // This will be set to true every 15 seconds and HR will be calculated
volatile static bool calculateMNN = false;

ISR(TIMER0_OVF_vect)
{
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	TCNT0=241;
 93c:	81 ef       	ldi	r24, 0xF1	; 241
 93e:	82 bf       	out	0x32, r24	; 50
	count++;
 940:	80 91 4c 01 	lds	r24, 0x014C
 944:	90 91 4d 01 	lds	r25, 0x014D
 948:	01 96       	adiw	r24, 0x01	; 1
 94a:	90 93 4d 01 	sts	0x014D, r25
 94e:	80 93 4c 01 	sts	0x014C, r24
	timeIntervalBetweenLastTwoBeats++;
 952:	80 91 40 01 	lds	r24, 0x0140
 956:	90 91 41 01 	lds	r25, 0x0141
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	90 93 41 01 	sts	0x0141, r25
 960:	80 93 40 01 	sts	0x0140, r24
	
	if (count>=1000){
 964:	80 91 4c 01 	lds	r24, 0x014C
 968:	90 91 4d 01 	lds	r25, 0x014D
 96c:	23 e0       	ldi	r18, 0x03	; 3
 96e:	88 3e       	cpi	r24, 0xE8	; 232
 970:	92 07       	cpc	r25, r18
 972:	04 f1       	brlt	.+64     	; 0x9b4 <__vector_9+0x9a>
		sec++;
 974:	80 91 4a 01 	lds	r24, 0x014A
 978:	90 91 4b 01 	lds	r25, 0x014B
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	90 93 4b 01 	sts	0x014B, r25
 982:	80 93 4a 01 	sts	0x014A, r24
		timerForCalculatingHR++; // HR will be calculated when the value for this is 15.
 986:	80 91 44 01 	lds	r24, 0x0144
 98a:	90 91 45 01 	lds	r25, 0x0145
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 45 01 	sts	0x0145, r25
 994:	80 93 44 01 	sts	0x0144, r24
		timerForCalculatingMNN++;
 998:	80 91 42 01 	lds	r24, 0x0142
 99c:	90 91 43 01 	lds	r25, 0x0143
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	90 93 43 01 	sts	0x0143, r25
 9a6:	80 93 42 01 	sts	0x0142, r24
		count=0;
 9aa:	10 92 4d 01 	sts	0x014D, r1
 9ae:	10 92 4c 01 	sts	0x014C, r1
		updateLCD();
 9b2:	a7 df       	rcall	.-178    	; 0x902 <updateLCD>
	}
	
	if (timerForCalculatingHR==15){ // this will assist HR calculator to keep track of beats in last 15 seconds
 9b4:	80 91 44 01 	lds	r24, 0x0144
 9b8:	90 91 45 01 	lds	r25, 0x0145
 9bc:	8f 30       	cpi	r24, 0x0F	; 15
 9be:	91 05       	cpc	r25, r1
 9c0:	51 f4       	brne	.+20     	; 0x9d6 <__vector_9+0xbc>

		calculateHeartRate = true; // this will alert the the HR function to calculate HR
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	90 93 73 00 	sts	0x0073, r25
 9ca:	80 93 72 00 	sts	0x0072, r24
		timerForCalculatingHR=0; // when t=15, reset this to zero
 9ce:	10 92 45 01 	sts	0x0145, r1
 9d2:	10 92 44 01 	sts	0x0144, r1

	}
	
	if (timerForCalculatingMNN==4) {
 9d6:	80 91 42 01 	lds	r24, 0x0142
 9da:	90 91 43 01 	lds	r25, 0x0143
 9de:	84 30       	cpi	r24, 0x04	; 4
 9e0:	91 05       	cpc	r25, r1
 9e2:	51 f4       	brne	.+20     	; 0x9f8 <__vector_9+0xde>
		
		calculateMNN = true;
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	90 93 71 00 	sts	0x0071, r25
 9ec:	80 93 70 00 	sts	0x0070, r24
		timerForCalculatingMNN = 0;
 9f0:	10 92 43 01 	sts	0x0143, r1
 9f4:	10 92 42 01 	sts	0x0142, r1
		
	}
	
	if (sec>=60){
 9f8:	80 91 4a 01 	lds	r24, 0x014A
 9fc:	90 91 4b 01 	lds	r25, 0x014B
 a00:	8c 33       	cpi	r24, 0x3C	; 60
 a02:	91 05       	cpc	r25, r1
 a04:	6c f0       	brlt	.+26     	; 0xa20 <__vector_9+0x106>
		min++;
 a06:	80 91 48 01 	lds	r24, 0x0148
 a0a:	90 91 49 01 	lds	r25, 0x0149
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	90 93 49 01 	sts	0x0149, r25
 a14:	80 93 48 01 	sts	0x0148, r24
		sec=0;
 a18:	10 92 4b 01 	sts	0x014B, r1
 a1c:	10 92 4a 01 	sts	0x014A, r1
	}
	
	if (min>=60){
 a20:	80 91 48 01 	lds	r24, 0x0148
 a24:	90 91 49 01 	lds	r25, 0x0149
 a28:	8c 33       	cpi	r24, 0x3C	; 60
 a2a:	91 05       	cpc	r25, r1
 a2c:	6c f0       	brlt	.+26     	; 0xa48 <__vector_9+0x12e>
		hours++;
 a2e:	80 91 46 01 	lds	r24, 0x0146
 a32:	90 91 47 01 	lds	r25, 0x0147
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	90 93 47 01 	sts	0x0147, r25
 a3c:	80 93 46 01 	sts	0x0146, r24
		min=0;
 a40:	10 92 49 01 	sts	0x0149, r1
 a44:	10 92 48 01 	sts	0x0148, r1
	}
	
}
 a48:	ff 91       	pop	r31
 a4a:	ef 91       	pop	r30
 a4c:	bf 91       	pop	r27
 a4e:	af 91       	pop	r26
 a50:	9f 91       	pop	r25
 a52:	8f 91       	pop	r24
 a54:	7f 91       	pop	r23
 a56:	6f 91       	pop	r22
 a58:	5f 91       	pop	r21
 a5a:	4f 91       	pop	r20
 a5c:	3f 91       	pop	r19
 a5e:	2f 91       	pop	r18
 a60:	0f 90       	pop	r0
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	0f 90       	pop	r0
 a66:	1f 90       	pop	r1
 a68:	18 95       	reti

00000a6a <storeTimeIntervalBetweenLastTwoBeats>:

storeTimeIntervalBetweenLastTwoBeats () {
	// the next line will be used to calculate MNN
	sumOFTimeIntervalsForAllBeats += timeIntervalBetweenLastTwoBeats;
 a6a:	80 91 76 00 	lds	r24, 0x0076
 a6e:	90 91 77 00 	lds	r25, 0x0077
 a72:	20 91 40 01 	lds	r18, 0x0140
 a76:	30 91 41 01 	lds	r19, 0x0141
 a7a:	82 0f       	add	r24, r18
 a7c:	93 1f       	adc	r25, r19
 a7e:	90 93 77 00 	sts	0x0077, r25
 a82:	80 93 76 00 	sts	0x0076, r24
	
	
	// the next few lines will be used for calculating SD
	
	int index = indexOfTimeIntervalVector;
 a86:	e0 91 74 00 	lds	r30, 0x0074
 a8a:	f0 91 75 00 	lds	r31, 0x0075
	
	timeIntervalForAllBeats[index] = timeIntervalBetweenLastTwoBeats;
 a8e:	80 91 40 01 	lds	r24, 0x0140
 a92:	90 91 41 01 	lds	r25, 0x0141
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	e8 58       	subi	r30, 0x88	; 136
 a9c:	ff 4f       	sbci	r31, 0xFF	; 255
 a9e:	91 83       	std	Z+1, r25	; 0x01
 aa0:	80 83       	st	Z, r24
	
	timeIntervalBetweenLastTwoBeats = 0; // start counting again for next beat
 aa2:	10 92 41 01 	sts	0x0141, r1
 aa6:	10 92 40 01 	sts	0x0140, r1
	
	indexOfTimeIntervalVector++;
 aaa:	80 91 74 00 	lds	r24, 0x0074
 aae:	90 91 75 00 	lds	r25, 0x0075
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	90 93 75 00 	sts	0x0075, r25
 ab8:	80 93 74 00 	sts	0x0074, r24
	
}
 abc:	08 95       	ret

00000abe <__vector_14>:
volatile static int heartBeatTrackerForMNN = 0; // this will be used to calculate MNN and it will get reset every 4 seconds
volatile static int heartBeatInLast15Sec=0;
#include "timer.h"

ISR(ADC_vect)
{
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	2f 93       	push	r18
 aca:	3f 93       	push	r19
 acc:	4f 93       	push	r20
 ace:	5f 93       	push	r21
 ad0:	6f 93       	push	r22
 ad2:	7f 93       	push	r23
 ad4:	8f 93       	push	r24
 ad6:	9f 93       	push	r25
 ad8:	af 93       	push	r26
 ada:	bf 93       	push	r27
 adc:	ef 93       	push	r30
 ade:	ff 93       	push	r31
	
	adc_data = ADCH;	// read adc data
 ae0:	65 b1       	in	r22, 0x05	; 5
 ae2:	60 93 78 01 	sts	0x0178, r22
	//adc_data = adc_data-512; // to calculate the energy of signal, we subtract it by 512
	
	if (adc_data > 2.9) {
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	90 d0       	rcall	.+288    	; 0xc0e <__floatsisf>
 aee:	2a e9       	ldi	r18, 0x9A	; 154
 af0:	39 e9       	ldi	r19, 0x99	; 153
 af2:	49 e3       	ldi	r20, 0x39	; 57
 af4:	50 e4       	ldi	r21, 0x40	; 64
 af6:	ef d0       	rcall	.+478    	; 0xcd6 <__gesf2>
 af8:	18 16       	cp	r1, r24
 afa:	9c f5       	brge	.+102    	; 0xb62 <__vector_14+0xa4>
		PORTB=0b1111111;
 afc:	8f e7       	ldi	r24, 0x7F	; 127
 afe:	88 bb       	out	0x18, r24	; 24
		//display('1');
		
		currentSignal = 1;
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	90 93 61 00 	sts	0x0061, r25
 b08:	80 93 60 00 	sts	0x0060, r24
		if (lastSignal==currentSignal){
 b0c:	80 91 62 00 	lds	r24, 0x0062
 b10:	90 91 63 00 	lds	r25, 0x0063
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	91 05       	cpc	r25, r1
 b18:	51 f1       	breq	.+84     	; 0xb6e <__vector_14+0xb0>
			//display('2');
		}else{
			lastSignal = currentSignal;
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	90 93 63 00 	sts	0x0063, r25
 b22:	80 93 62 00 	sts	0x0062, r24
			numberOfHeartBeats++;
 b26:	80 91 52 01 	lds	r24, 0x0152
 b2a:	90 91 53 01 	lds	r25, 0x0153
 b2e:	01 96       	adiw	r24, 0x01	; 1
 b30:	90 93 53 01 	sts	0x0153, r25
 b34:	80 93 52 01 	sts	0x0152, r24
			heartBeatTrackerForMNN++;
 b38:	80 91 50 01 	lds	r24, 0x0150
 b3c:	90 91 51 01 	lds	r25, 0x0151
 b40:	01 96       	adiw	r24, 0x01	; 1
 b42:	90 93 51 01 	sts	0x0151, r25
 b46:	80 93 50 01 	sts	0x0150, r24
			heartBeatInLast15Sec++; // this will be set to 0 at t=15 in timer function
 b4a:	80 91 4e 01 	lds	r24, 0x014E
 b4e:	90 91 4f 01 	lds	r25, 0x014F
 b52:	01 96       	adiw	r24, 0x01	; 1
 b54:	90 93 4f 01 	sts	0x014F, r25
 b58:	80 93 4e 01 	sts	0x014E, r24
			storeTimeIntervalBetweenLastTwoBeats();
 b5c:	86 df       	rcall	.-244    	; 0xa6a <storeTimeIntervalBetweenLastTwoBeats>
			updateLCD();
 b5e:	d1 de       	rcall	.-606    	; 0x902 <updateLCD>
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <__vector_14+0xb0>
		}
		
	}
	else {
		lastSignal=0;
 b62:	10 92 63 00 	sts	0x0063, r1
 b66:	10 92 62 00 	sts	0x0062, r1
		PORTB=0b11111110;
 b6a:	8e ef       	ldi	r24, 0xFE	; 254
 b6c:	88 bb       	out	0x18, r24	; 24
		//_delay_ms(100);
		//initialLCD();
		//returLCD();
		
	}
	ADCSRA = ADCSRA | 0x40; // start next ADC conversion
 b6e:	36 9a       	sbi	0x06, 6	; 6
}
 b70:	ff 91       	pop	r31
 b72:	ef 91       	pop	r30
 b74:	bf 91       	pop	r27
 b76:	af 91       	pop	r26
 b78:	9f 91       	pop	r25
 b7a:	8f 91       	pop	r24
 b7c:	7f 91       	pop	r23
 b7e:	6f 91       	pop	r22
 b80:	5f 91       	pop	r21
 b82:	4f 91       	pop	r20
 b84:	3f 91       	pop	r19
 b86:	2f 91       	pop	r18
 b88:	0f 90       	pop	r0
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	0f 90       	pop	r0
 b8e:	1f 90       	pop	r1
 b90:	18 95       	reti

00000b92 <main>:


int main(void)
{
	
	DDRB = 0b11111111;	// Set all pins of PORTB as output
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b11111111;	// Set all pins of PORTD as output
 b96:	81 bb       	out	0x11, r24	; 17
	ADMUX = 0x40;		//Choose 5V VCC as reference voltage and select ADC0 as channel
 b98:	80 e4       	ldi	r24, 0x40	; 64
 b9a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xCD;		//Start ADC conversion and set ADC prescalar to 128
 b9c:	8d ec       	ldi	r24, 0xCD	; 205
 b9e:	86 b9       	out	0x06, r24	; 6
	TCCR0 = 0x05;		//Set prescalr to 1024
 ba0:	85 e0       	ldi	r24, 0x05	; 5
 ba2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;			// set 0 as initial value of timer0
 ba4:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x01;	    //unmask  timer0 overflow interrupt
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	89 bf       	out	0x39, r24	; 57
			
	startLCD();	// call this function to initial LCD screen
 baa:	94 da       	rcall	.-2776   	; 0xd4 <startLCD>
	//returnLCD();	// call this function to move cursor to first (initial) position
			
	asm("sei");   // enable global interrupt
 bac:	78 94       	sei
	
	
	while(1){
		updateLCD();
 bae:	a9 de       	rcall	.-686    	; 0x902 <updateLCD>
 bb0:	fe cf       	rjmp	.-4      	; 0xbae <main+0x1c>

00000bb2 <__fixunssfsi>:
 bb2:	70 d0       	rcall	.+224    	; 0xc94 <__fp_splitA>
 bb4:	88 f0       	brcs	.+34     	; 0xbd8 <__fixunssfsi+0x26>
 bb6:	9f 57       	subi	r25, 0x7F	; 127
 bb8:	90 f0       	brcs	.+36     	; 0xbde <__fixunssfsi+0x2c>
 bba:	b9 2f       	mov	r27, r25
 bbc:	99 27       	eor	r25, r25
 bbe:	b7 51       	subi	r27, 0x17	; 23
 bc0:	a0 f0       	brcs	.+40     	; 0xbea <__fixunssfsi+0x38>
 bc2:	d1 f0       	breq	.+52     	; 0xbf8 <__fixunssfsi+0x46>
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	1a f0       	brmi	.+6      	; 0xbd4 <__fixunssfsi+0x22>
 bce:	ba 95       	dec	r27
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__fixunssfsi+0x12>
 bd2:	12 c0       	rjmp	.+36     	; 0xbf8 <__fixunssfsi+0x46>
 bd4:	b1 30       	cpi	r27, 0x01	; 1
 bd6:	81 f0       	breq	.+32     	; 0xbf8 <__fixunssfsi+0x46>
 bd8:	77 d0       	rcall	.+238    	; 0xcc8 <__fp_zero>
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	08 95       	ret
 bde:	74 c0       	rjmp	.+232    	; 0xcc8 <__fp_zero>
 be0:	67 2f       	mov	r22, r23
 be2:	78 2f       	mov	r23, r24
 be4:	88 27       	eor	r24, r24
 be6:	b8 5f       	subi	r27, 0xF8	; 248
 be8:	39 f0       	breq	.+14     	; 0xbf8 <__fixunssfsi+0x46>
 bea:	b9 3f       	cpi	r27, 0xF9	; 249
 bec:	cc f3       	brlt	.-14     	; 0xbe0 <__fixunssfsi+0x2e>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b3 95       	inc	r27
 bf6:	d9 f7       	brne	.-10     	; 0xbee <__fixunssfsi+0x3c>
 bf8:	3e f4       	brtc	.+14     	; 0xc08 <__fixunssfsi+0x56>
 bfa:	90 95       	com	r25
 bfc:	80 95       	com	r24
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__floatunsisf>:
 c0a:	e8 94       	clt
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <__floatsisf+0x12>

00000c0e <__floatsisf>:
 c0e:	97 fb       	bst	r25, 7
 c10:	3e f4       	brtc	.+14     	; 0xc20 <__floatsisf+0x12>
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	99 23       	and	r25, r25
 c22:	a9 f0       	breq	.+42     	; 0xc4e <__floatsisf+0x40>
 c24:	f9 2f       	mov	r31, r25
 c26:	96 e9       	ldi	r25, 0x96	; 150
 c28:	bb 27       	eor	r27, r27
 c2a:	93 95       	inc	r25
 c2c:	f6 95       	lsr	r31
 c2e:	87 95       	ror	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b7 95       	ror	r27
 c36:	f1 11       	cpse	r31, r1
 c38:	f8 cf       	rjmp	.-16     	; 0xc2a <__floatsisf+0x1c>
 c3a:	fa f4       	brpl	.+62     	; 0xc7a <__floatsisf+0x6c>
 c3c:	bb 0f       	add	r27, r27
 c3e:	11 f4       	brne	.+4      	; 0xc44 <__floatsisf+0x36>
 c40:	60 ff       	sbrs	r22, 0
 c42:	1b c0       	rjmp	.+54     	; 0xc7a <__floatsisf+0x6c>
 c44:	6f 5f       	subi	r22, 0xFF	; 255
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	16 c0       	rjmp	.+44     	; 0xc7a <__floatsisf+0x6c>
 c4e:	88 23       	and	r24, r24
 c50:	11 f0       	breq	.+4      	; 0xc56 <__floatsisf+0x48>
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	11 c0       	rjmp	.+34     	; 0xc78 <__floatsisf+0x6a>
 c56:	77 23       	and	r23, r23
 c58:	21 f0       	breq	.+8      	; 0xc62 <__floatsisf+0x54>
 c5a:	9e e8       	ldi	r25, 0x8E	; 142
 c5c:	87 2f       	mov	r24, r23
 c5e:	76 2f       	mov	r23, r22
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <__floatsisf+0x5e>
 c62:	66 23       	and	r22, r22
 c64:	71 f0       	breq	.+28     	; 0xc82 <__floatsisf+0x74>
 c66:	96 e8       	ldi	r25, 0x86	; 134
 c68:	86 2f       	mov	r24, r22
 c6a:	70 e0       	ldi	r23, 0x00	; 0
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	2a f0       	brmi	.+10     	; 0xc7a <__floatsisf+0x6c>
 c70:	9a 95       	dec	r25
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	da f7       	brpl	.-10     	; 0xc70 <__floatsisf+0x62>
 c7a:	88 0f       	add	r24, r24
 c7c:	96 95       	lsr	r25
 c7e:	87 95       	ror	r24
 c80:	97 f9       	bld	r25, 7
 c82:	08 95       	ret

00000c84 <__fp_split3>:
 c84:	57 fd       	sbrc	r21, 7
 c86:	90 58       	subi	r25, 0x80	; 128
 c88:	44 0f       	add	r20, r20
 c8a:	55 1f       	adc	r21, r21
 c8c:	59 f0       	breq	.+22     	; 0xca4 <__fp_splitA+0x10>
 c8e:	5f 3f       	cpi	r21, 0xFF	; 255
 c90:	71 f0       	breq	.+28     	; 0xcae <__fp_splitA+0x1a>
 c92:	47 95       	ror	r20

00000c94 <__fp_splitA>:
 c94:	88 0f       	add	r24, r24
 c96:	97 fb       	bst	r25, 7
 c98:	99 1f       	adc	r25, r25
 c9a:	61 f0       	breq	.+24     	; 0xcb4 <__fp_splitA+0x20>
 c9c:	9f 3f       	cpi	r25, 0xFF	; 255
 c9e:	79 f0       	breq	.+30     	; 0xcbe <__fp_splitA+0x2a>
 ca0:	87 95       	ror	r24
 ca2:	08 95       	ret
 ca4:	12 16       	cp	r1, r18
 ca6:	13 06       	cpc	r1, r19
 ca8:	14 06       	cpc	r1, r20
 caa:	55 1f       	adc	r21, r21
 cac:	f2 cf       	rjmp	.-28     	; 0xc92 <__fp_split3+0xe>
 cae:	46 95       	lsr	r20
 cb0:	f1 df       	rcall	.-30     	; 0xc94 <__fp_splitA>
 cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <__fp_splitA+0x30>
 cb4:	16 16       	cp	r1, r22
 cb6:	17 06       	cpc	r1, r23
 cb8:	18 06       	cpc	r1, r24
 cba:	99 1f       	adc	r25, r25
 cbc:	f1 cf       	rjmp	.-30     	; 0xca0 <__fp_splitA+0xc>
 cbe:	86 95       	lsr	r24
 cc0:	71 05       	cpc	r23, r1
 cc2:	61 05       	cpc	r22, r1
 cc4:	08 94       	sec
 cc6:	08 95       	ret

00000cc8 <__fp_zero>:
 cc8:	e8 94       	clt

00000cca <__fp_szero>:
 cca:	bb 27       	eor	r27, r27
 ccc:	66 27       	eor	r22, r22
 cce:	77 27       	eor	r23, r23
 cd0:	cb 01       	movw	r24, r22
 cd2:	97 f9       	bld	r25, 7
 cd4:	08 95       	ret

00000cd6 <__gesf2>:
 cd6:	45 d0       	rcall	.+138    	; 0xd62 <__fp_cmp>
 cd8:	08 f4       	brcc	.+2      	; 0xcdc <__gesf2+0x6>
 cda:	8f ef       	ldi	r24, 0xFF	; 255
 cdc:	08 95       	ret
 cde:	11 f4       	brne	.+4      	; 0xce4 <__gesf2+0xe>
 ce0:	0e f4       	brtc	.+2      	; 0xce4 <__gesf2+0xe>
 ce2:	71 c0       	rjmp	.+226    	; 0xdc6 <__fp_nan>
 ce4:	62 c0       	rjmp	.+196    	; 0xdaa <__fp_mpack>

00000ce6 <sqrt>:
 ce6:	d6 df       	rcall	.-84     	; 0xc94 <__fp_splitA>
 ce8:	d0 f3       	brcs	.-12     	; 0xcde <__gesf2+0x8>
 cea:	99 23       	and	r25, r25
 cec:	d9 f3       	breq	.-10     	; 0xce4 <__gesf2+0xe>
 cee:	ce f3       	brts	.-14     	; 0xce2 <__gesf2+0xc>
 cf0:	9f 57       	subi	r25, 0x7F	; 127
 cf2:	55 0b       	sbc	r21, r21
 cf4:	87 ff       	sbrs	r24, 7
 cf6:	6a d0       	rcall	.+212    	; 0xdcc <__fp_norm2>
 cf8:	00 24       	eor	r0, r0
 cfa:	a0 e6       	ldi	r26, 0x60	; 96
 cfc:	40 ea       	ldi	r20, 0xA0	; 160
 cfe:	90 01       	movw	r18, r0
 d00:	80 58       	subi	r24, 0x80	; 128
 d02:	56 95       	lsr	r21
 d04:	97 95       	ror	r25
 d06:	28 f4       	brcc	.+10     	; 0xd12 <sqrt+0x2c>
 d08:	80 5c       	subi	r24, 0xC0	; 192
 d0a:	66 0f       	add	r22, r22
 d0c:	77 1f       	adc	r23, r23
 d0e:	88 1f       	adc	r24, r24
 d10:	20 f0       	brcs	.+8      	; 0xd1a <sqrt+0x34>
 d12:	26 17       	cp	r18, r22
 d14:	37 07       	cpc	r19, r23
 d16:	48 07       	cpc	r20, r24
 d18:	30 f4       	brcc	.+12     	; 0xd26 <sqrt+0x40>
 d1a:	62 1b       	sub	r22, r18
 d1c:	73 0b       	sbc	r23, r19
 d1e:	84 0b       	sbc	r24, r20
 d20:	20 29       	or	r18, r0
 d22:	31 29       	or	r19, r1
 d24:	4a 2b       	or	r20, r26
 d26:	a6 95       	lsr	r26
 d28:	17 94       	ror	r1
 d2a:	07 94       	ror	r0
 d2c:	20 25       	eor	r18, r0
 d2e:	31 25       	eor	r19, r1
 d30:	4a 27       	eor	r20, r26
 d32:	58 f7       	brcc	.-42     	; 0xd0a <sqrt+0x24>
 d34:	66 0f       	add	r22, r22
 d36:	77 1f       	adc	r23, r23
 d38:	88 1f       	adc	r24, r24
 d3a:	20 f0       	brcs	.+8      	; 0xd44 <sqrt+0x5e>
 d3c:	26 17       	cp	r18, r22
 d3e:	37 07       	cpc	r19, r23
 d40:	48 07       	cpc	r20, r24
 d42:	30 f4       	brcc	.+12     	; 0xd50 <sqrt+0x6a>
 d44:	62 0b       	sbc	r22, r18
 d46:	73 0b       	sbc	r23, r19
 d48:	84 0b       	sbc	r24, r20
 d4a:	20 0d       	add	r18, r0
 d4c:	31 1d       	adc	r19, r1
 d4e:	41 1d       	adc	r20, r1
 d50:	a0 95       	com	r26
 d52:	81 f7       	brne	.-32     	; 0xd34 <sqrt+0x4e>
 d54:	b9 01       	movw	r22, r18
 d56:	84 2f       	mov	r24, r20
 d58:	91 58       	subi	r25, 0x81	; 129
 d5a:	88 0f       	add	r24, r24
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	08 95       	ret

00000d62 <__fp_cmp>:
 d62:	99 0f       	add	r25, r25
 d64:	00 08       	sbc	r0, r0
 d66:	55 0f       	add	r21, r21
 d68:	aa 0b       	sbc	r26, r26
 d6a:	e0 e8       	ldi	r30, 0x80	; 128
 d6c:	fe ef       	ldi	r31, 0xFE	; 254
 d6e:	16 16       	cp	r1, r22
 d70:	17 06       	cpc	r1, r23
 d72:	e8 07       	cpc	r30, r24
 d74:	f9 07       	cpc	r31, r25
 d76:	c0 f0       	brcs	.+48     	; 0xda8 <__fp_cmp+0x46>
 d78:	12 16       	cp	r1, r18
 d7a:	13 06       	cpc	r1, r19
 d7c:	e4 07       	cpc	r30, r20
 d7e:	f5 07       	cpc	r31, r21
 d80:	98 f0       	brcs	.+38     	; 0xda8 <__fp_cmp+0x46>
 d82:	62 1b       	sub	r22, r18
 d84:	73 0b       	sbc	r23, r19
 d86:	84 0b       	sbc	r24, r20
 d88:	95 0b       	sbc	r25, r21
 d8a:	39 f4       	brne	.+14     	; 0xd9a <__fp_cmp+0x38>
 d8c:	0a 26       	eor	r0, r26
 d8e:	61 f0       	breq	.+24     	; 0xda8 <__fp_cmp+0x46>
 d90:	23 2b       	or	r18, r19
 d92:	24 2b       	or	r18, r20
 d94:	25 2b       	or	r18, r21
 d96:	21 f4       	brne	.+8      	; 0xda0 <__fp_cmp+0x3e>
 d98:	08 95       	ret
 d9a:	0a 26       	eor	r0, r26
 d9c:	09 f4       	brne	.+2      	; 0xda0 <__fp_cmp+0x3e>
 d9e:	a1 40       	sbci	r26, 0x01	; 1
 da0:	a6 95       	lsr	r26
 da2:	8f ef       	ldi	r24, 0xFF	; 255
 da4:	81 1d       	adc	r24, r1
 da6:	81 1d       	adc	r24, r1
 da8:	08 95       	ret

00000daa <__fp_mpack>:
 daa:	9f 3f       	cpi	r25, 0xFF	; 255
 dac:	31 f0       	breq	.+12     	; 0xdba <__fp_mpack_finite+0xc>

00000dae <__fp_mpack_finite>:
 dae:	91 50       	subi	r25, 0x01	; 1
 db0:	20 f4       	brcc	.+8      	; 0xdba <__fp_mpack_finite+0xc>
 db2:	87 95       	ror	r24
 db4:	77 95       	ror	r23
 db6:	67 95       	ror	r22
 db8:	b7 95       	ror	r27
 dba:	88 0f       	add	r24, r24
 dbc:	91 1d       	adc	r25, r1
 dbe:	96 95       	lsr	r25
 dc0:	87 95       	ror	r24
 dc2:	97 f9       	bld	r25, 7
 dc4:	08 95       	ret

00000dc6 <__fp_nan>:
 dc6:	9f ef       	ldi	r25, 0xFF	; 255
 dc8:	80 ec       	ldi	r24, 0xC0	; 192
 dca:	08 95       	ret

00000dcc <__fp_norm2>:
 dcc:	91 50       	subi	r25, 0x01	; 1
 dce:	50 40       	sbci	r21, 0x00	; 0
 dd0:	66 0f       	add	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	d2 f7       	brpl	.-12     	; 0xdcc <__fp_norm2>
 dd8:	08 95       	ret

00000dda <__udivmodhi4>:
 dda:	aa 1b       	sub	r26, r26
 ddc:	bb 1b       	sub	r27, r27
 dde:	51 e1       	ldi	r21, 0x11	; 17
 de0:	07 c0       	rjmp	.+14     	; 0xdf0 <__udivmodhi4_ep>

00000de2 <__udivmodhi4_loop>:
 de2:	aa 1f       	adc	r26, r26
 de4:	bb 1f       	adc	r27, r27
 de6:	a6 17       	cp	r26, r22
 de8:	b7 07       	cpc	r27, r23
 dea:	10 f0       	brcs	.+4      	; 0xdf0 <__udivmodhi4_ep>
 dec:	a6 1b       	sub	r26, r22
 dee:	b7 0b       	sbc	r27, r23

00000df0 <__udivmodhi4_ep>:
 df0:	88 1f       	adc	r24, r24
 df2:	99 1f       	adc	r25, r25
 df4:	5a 95       	dec	r21
 df6:	a9 f7       	brne	.-22     	; 0xde2 <__udivmodhi4_loop>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	bc 01       	movw	r22, r24
 dfe:	cd 01       	movw	r24, r26
 e00:	08 95       	ret

00000e02 <__divmodhi4>:
 e02:	97 fb       	bst	r25, 7
 e04:	09 2e       	mov	r0, r25
 e06:	07 26       	eor	r0, r23
 e08:	0a d0       	rcall	.+20     	; 0xe1e <__divmodhi4_neg1>
 e0a:	77 fd       	sbrc	r23, 7
 e0c:	04 d0       	rcall	.+8      	; 0xe16 <__divmodhi4_neg2>
 e0e:	e5 df       	rcall	.-54     	; 0xdda <__udivmodhi4>
 e10:	06 d0       	rcall	.+12     	; 0xe1e <__divmodhi4_neg1>
 e12:	00 20       	and	r0, r0
 e14:	1a f4       	brpl	.+6      	; 0xe1c <__divmodhi4_exit>

00000e16 <__divmodhi4_neg2>:
 e16:	70 95       	com	r23
 e18:	61 95       	neg	r22
 e1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e1c <__divmodhi4_exit>:
 e1c:	08 95       	ret

00000e1e <__divmodhi4_neg1>:
 e1e:	f6 f7       	brtc	.-4      	; 0xe1c <__divmodhi4_exit>
 e20:	90 95       	com	r25
 e22:	81 95       	neg	r24
 e24:	9f 4f       	sbci	r25, 0xFF	; 255
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
